{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hi\n"
     ]
    }
   ],
   "source": [
    "print(\"hi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import svm \n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "diabetes_dataset=pd.read_csv(\"../datasets/diabetes.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>10</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "      <td>48</td>\n",
       "      <td>180</td>\n",
       "      <td>32.9</td>\n",
       "      <td>0.171</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2</td>\n",
       "      <td>122</td>\n",
       "      <td>70</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>36.8</td>\n",
       "      <td>0.340</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>5</td>\n",
       "      <td>121</td>\n",
       "      <td>72</td>\n",
       "      <td>23</td>\n",
       "      <td>112</td>\n",
       "      <td>26.2</td>\n",
       "      <td>0.245</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>1</td>\n",
       "      <td>126</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.1</td>\n",
       "      <td>0.349</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>767</th>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>30.4</td>\n",
       "      <td>0.315</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "763           10      101             76             48      180  32.9   \n",
       "764            2      122             70             27        0  36.8   \n",
       "765            5      121             72             23      112  26.2   \n",
       "766            1      126             60              0        0  30.1   \n",
       "767            1       93             70             31        0  30.4   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  Outcome  \n",
       "763                     0.171   63        0  \n",
       "764                     0.340   27        0  \n",
       "765                     0.245   30        0  \n",
       "766                     0.349   47        1  \n",
       "767                     0.315   23        0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_insulin = diabetes_dataset[diabetes_dataset[\"Insulin\"] != 0][\"Insulin\"].mean()\n",
    "diabetes_dataset[\"Insulin\"] = diabetes_dataset[\"Insulin\"].replace(0, mean_insulin)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "median_skin_thickness=diabetes_dataset[diabetes_dataset[\"SkinThickness\"]!=0][\"SkinThickness\"].mean()\n",
    "diabetes_dataset[\"SkinThickness\"]=diabetes_dataset[\"SkinThickness\"].replace(0,median_skin_thickness)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35.00000</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29.00000</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>29.15342</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35.00000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness     Insulin   BMI  \\\n",
       "0            6      148             72       35.00000  155.548223  33.6   \n",
       "1            1       85             66       29.00000  155.548223  26.6   \n",
       "2            8      183             64       29.15342  155.548223  23.3   \n",
       "3            1       89             66       23.00000   94.000000  28.1   \n",
       "4            0      137             40       35.00000  168.000000  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(768, 9)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.845052</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>29.153420</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>0.348958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.369578</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>8.790942</td>\n",
       "      <td>85.021108</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>0.476951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>121.500000</td>\n",
       "      <td>27.300000</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>29.153420</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.372500</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>140.250000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>36.600000</td>\n",
       "      <td>0.626250</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>846.000000</td>\n",
       "      <td>67.100000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
       "mean      3.845052  120.894531      69.105469      29.153420  155.548223   \n",
       "std       3.369578   31.972618      19.355807       8.790942   85.021108   \n",
       "min       0.000000    0.000000       0.000000       7.000000   14.000000   \n",
       "25%       1.000000   99.000000      62.000000      25.000000  121.500000   \n",
       "50%       3.000000  117.000000      72.000000      29.153420  155.548223   \n",
       "75%       6.000000  140.250000      80.000000      32.000000  155.548223   \n",
       "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
       "\n",
       "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
       "count  768.000000                768.000000  768.000000  768.000000  \n",
       "mean    31.992578                  0.471876   33.240885    0.348958  \n",
       "std      7.884160                  0.331329   11.760232    0.476951  \n",
       "min      0.000000                  0.078000   21.000000    0.000000  \n",
       "25%     27.300000                  0.243750   24.000000    0.000000  \n",
       "50%     32.000000                  0.372500   29.000000    0.000000  \n",
       "75%     36.600000                  0.626250   41.000000    1.000000  \n",
       "max     67.100000                  2.420000   81.000000    1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outcome</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin  BMI  \\\n",
       "Outcome                                                                     \n",
       "0                500      500            500            500      500  500   \n",
       "1                268      268            268            268      268  268   \n",
       "\n",
       "         DiabetesPedigreeFunction  Age  \n",
       "Outcome                                 \n",
       "0                             500  500  \n",
       "1                             268  268  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.groupby(diabetes_dataset['Outcome']).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Outcome\n",
       "0    500\n",
       "1    268\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset[\"Outcome\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outcome</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.298000</td>\n",
       "      <td>109.980000</td>\n",
       "      <td>68.184000</td>\n",
       "      <td>27.768651</td>\n",
       "      <td>142.210761</td>\n",
       "      <td>30.304200</td>\n",
       "      <td>0.429734</td>\n",
       "      <td>31.190000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.865672</td>\n",
       "      <td>141.257463</td>\n",
       "      <td>70.824627</td>\n",
       "      <td>31.736944</td>\n",
       "      <td>180.431548</td>\n",
       "      <td>35.142537</td>\n",
       "      <td>0.550500</td>\n",
       "      <td>37.067164</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "Outcome                                                                      \n",
       "0           3.298000  109.980000      68.184000      27.768651  142.210761   \n",
       "1           4.865672  141.257463      70.824627      31.736944  180.431548   \n",
       "\n",
       "               BMI  DiabetesPedigreeFunction        Age  \n",
       "Outcome                                                  \n",
       "0        30.304200                  0.429734  31.190000  \n",
       "1        35.142537                  0.550500  37.067164  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.groupby(\"Outcome\").mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=diabetes_dataset.drop(columns=[\"Outcome\"],axis=1)\n",
    "y=diabetes_dataset[\"Outcome\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35.00000</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29.00000</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>29.15342</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35.00000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness     Insulin   BMI  \\\n",
       "0            6      148             72       35.00000  155.548223  33.6   \n",
       "1            1       85             66       29.00000  155.548223  26.6   \n",
       "2            8      183             64       29.15342  155.548223  23.3   \n",
       "3            1       89             66       23.00000   94.000000  28.1   \n",
       "4            0      137             40       35.00000  168.000000  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  \n",
       "0                     0.627   50  \n",
       "1                     0.351   31  \n",
       "2                     0.672   32  \n",
       "3                     0.167   21  \n",
       "4                     2.288   33  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,Y_train,Y_test=train_test_split(X,y,test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>29.15342</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.304</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>618</th>\n",
       "      <td>9</td>\n",
       "      <td>112</td>\n",
       "      <td>82</td>\n",
       "      <td>24.00000</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>28.2</td>\n",
       "      <td>1.282</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>1</td>\n",
       "      <td>139</td>\n",
       "      <td>46</td>\n",
       "      <td>19.00000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>28.7</td>\n",
       "      <td>0.654</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>0</td>\n",
       "      <td>161</td>\n",
       "      <td>50</td>\n",
       "      <td>29.15342</td>\n",
       "      <td>155.548223</td>\n",
       "      <td>21.9</td>\n",
       "      <td>0.254</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>6</td>\n",
       "      <td>134</td>\n",
       "      <td>80</td>\n",
       "      <td>37.00000</td>\n",
       "      <td>370.000000</td>\n",
       "      <td>46.2</td>\n",
       "      <td>0.238</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness     Insulin   BMI  \\\n",
       "60             2       84              0       29.15342  155.548223   0.0   \n",
       "618            9      112             82       24.00000  155.548223  28.2   \n",
       "346            1      139             46       19.00000   83.000000  28.7   \n",
       "294            0      161             50       29.15342  155.548223  21.9   \n",
       "231            6      134             80       37.00000  370.000000  46.2   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  \n",
       "60                      0.304   21  \n",
       "618                     1.282   50  \n",
       "346                     0.654   22  \n",
       "294                     0.254   65  \n",
       "231                     0.238   46  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(614, 8)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(154, 8)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=svm.SVC(kernel=\"linear\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the model is: 0.7597402597402597\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy of the model is:\",accuracy_score(Y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix , classification_report\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Predicted NO Diabetes  Predicted Diabetes\n",
      "NO Diabetes                     81                  18\n",
      "Diabetes                        19                  36\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(Y_test, y_pred)\n",
    "cm_df = pd.DataFrame(cm, index=[\"NO Diabetes\", \"Diabetes\"], columns=[\"Predicted NO Diabetes\", \"Predicted Diabetes\"])\n",
    "\n",
    "print(cm_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "cm = confusion_matrix(Y_test, y_pred)\n",
    "class_names = [\"NO Diabetes\", \"Diabetes\"]\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=class_names, yticklabels=class_names)\n",
    "plt.xlabel(\"Predicted Labels\")\n",
    "plt.ylabel(\"True Labels\")\n",
    "plt.title(\"Confusion Matrix\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.82      0.81        99\n",
      "           1       0.67      0.65      0.66        55\n",
      "\n",
      "    accuracy                           0.76       154\n",
      "   macro avg       0.74      0.74      0.74       154\n",
      "weighted avg       0.76      0.76      0.76       154\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(Y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precession: 0.6666666666666666\n",
      "Recall: 0.6545454545454545\n",
      "F1 Score: 0.6605504587155964\n"
     ]
    }
   ],
   "source": [
    "precision=precision_score(Y_test,y_pred)\n",
    "recall=recall_score(Y_test,y_pred)\n",
    "f1=f1_score(Y_test,y_pred)\n",
    "print(\"Precession:\",precision)\n",
    "print(\"Recall:\",recall)\n",
    "print(\"F1 Score:\",f1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Increasing Accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pregnancies                 0\n",
       "Glucose                     0\n",
       "BloodPressure               0\n",
       "SkinThickness               0\n",
       "Insulin                     0\n",
       "BMI                         0\n",
       "DiabetesPedigreeFunction    0\n",
       "Age                         0\n",
       "Outcome                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "selector = SelectKBest(score_func=f_classif, k=6)\n",
    "X_new = selector.fit_transform(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "smote = SMOTE(sampling_strategy='auto', random_state=42)\n",
    "X_resampled, y_resampled = smote.fit_resample(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "\n",
    "undersampler = RandomUnderSampler(sampling_strategy='auto', random_state=42)\n",
    "X_resampled, y_resampled = undersampler.fit_resample(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(768, 6)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,Y_train,Y_test=train_test_split(X_resampled,y_resampled,test_size=0.2,random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, n_estimators=200,\n",
       "                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, n_estimators=200,\n",
       "                       random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(class_weight='balanced', n_estimators=200,\n",
       "                       random_state=42)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=RandomForestClassifier(n_estimators=200, random_state=42,class_weight=\"balanced\")\n",
    "model.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the model is: 0.7962962962962963\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy of the model is:\",accuracy_score(Y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.81      0.81        59\n",
      "           1       0.78      0.78      0.78        49\n",
      "\n",
      "    accuracy                           0.80       108\n",
      "   macro avg       0.79      0.79      0.79       108\n",
      "weighted avg       0.80      0.80      0.80       108\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(Y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm=confusion_matrix(Y_test,y_pred)\n",
    "class_names=[\"No Diabetes\",\"Diabetes\"]\n",
    "sns.heatmap(cm,annot=True,fmt=\"d\",cmap=\"Greens\",xticklabels=class_names,yticklabels=class_names)\n",
    "plt.xlabel(\"Predicted Labels\")\n",
    "plt.ylabel(\"True Labels\")\n",
    "plt.title(\"Confusion Matrix\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not find a version that satisfies the requirement pickle (from versions: none)\n",
      "ERROR: No matching distribution found for pickle\n"
     ]
    }
   ],
   "source": [
    "pip install pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "filename=\"diabetes_model.sav\"\n",
    "pickle.dump(model,open(filename,\"wb\"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
